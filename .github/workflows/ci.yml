name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-languages:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes

    # - name: Setup Cachix
    #   uses: cachix/cachix-action@v12
    #   with:
    #     name: programming-languages
    #     authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    #     skipPush: true

    - name: Get available packages
      id: packages
      run: |
        packages=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys | join(" ")')
        echo "packages=$packages" >> $GITHUB_OUTPUT

    - name: Test all programming languages
      run: |
        echo "Testing the following packages: ${{ steps.packages.outputs.packages }}"
        for package in ${{ steps.packages.outputs.packages }}; do
          echo "::group::Testing $package"
          echo "Running: nix run .#$package"
          timeout 500 nix run .#$package || {
            echo "::error::Package $package failed or timed out"
            exit 1
          }
          echo "::endgroup::"
        done

  build-and-publish-docker:
    runs-on: ubuntu-latest
    needs: test-languages
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: programming-languages
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get available Docker images
      id: docker-images
      run: |
        images=$(nix flake show --json | jq -r '.dockerImages."x86_64-linux" | keys | join(" ")')
        echo "images=$images" >> $GITHUB_OUTPUT

    - name: Build and push Docker images
      run: |
        echo "Building and pushing the following Docker images: ${{ steps.docker-images.outputs.images }}"
        for image in ${{ steps.docker-images.outputs.images }}; do
          echo "::group::Building and pushing $image"

          # Build the Docker image
          echo "Building Docker image for $image..."
          nix build .#dockerImages.x86_64-linux.$image

          # Load into Docker
          echo "Loading Docker image..."
          docker load < result

          # Get the image name that was loaded
          loaded_image=$(docker load < result | grep "Loaded image:" | cut -d' ' -f3)
          echo "Loaded image: $loaded_image"

          # Tag for GitHub Container Registry
          github_image="ghcr.io/${{ github.repository_owner }}/programming-languages-$image:latest"
          github_image_commit="ghcr.io/${{ github.repository_owner }}/programming-languages-$image:${{ github.sha }}"

          echo "Tagging as: $github_image"
          docker tag "$loaded_image" "$github_image"
          docker tag "$loaded_image" "$github_image_commit"

          # Push to GitHub Container Registry
          echo "Pushing to GitHub Container Registry..."
          docker push "$github_image"
          docker push "$github_image_commit"

          echo "::endgroup::"
        done

    - name: Generate image list
      run: |
        echo "## 🐳 Available Docker Images" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following Docker images have been published to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        for image in ${{ steps.docker-images.outputs.images }}; do
          echo "- \`ghcr.io/${{ github.repository_owner }}/programming-languages-$image:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/programming-languages-$image:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage Example:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker run --rm ghcr.io/${{ github.repository_owner }}/programming-languages-python:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  test-docker-images:
    runs-on: ubuntu-latest
    needs: build-and-publish-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test published Docker images
      run: |
        # Test a few key images to make sure they work
        test_images=("python" "rust" "cpp" "go")

        for image in "${test_images[@]}"; do
          echo "::group::Testing ghcr.io/${{ github.repository_owner }}/programming-languages-$image:latest"

          # Pull and run the image
          docker run --rm "ghcr.io/${{ github.repository_owner }}/programming-languages-$image:latest" | head -10

          echo "::endgroup::"
        done
